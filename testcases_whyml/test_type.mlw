type option 'a = None | Some 'a
type option2 'a 'b = None2 | Some2 'a 'b

type tree 'a = 
	| Empty
	| NonEmpty 'a (tree 'a) (tree 'a)

(* Without generics [Nothing] *)
type tree2 = 
	| Empty2
	| NonEmpty2 int tree2 tree2

type list 'a = Nil | Cons 'a (list 'a)

type list2 = Nil2 | Cons2 int list2

let f x y z = x
(* let g x = f Empty (Cons 2 Nil) (Some x) *)
let a = 5
let h a = g a 
(*
let h() = f a

let f2 a = Cons 1 a
*)
let f2 a b = Some2 a b
